--------------------------------------------------------------------------------
Algorithm 1
--------------------------------------------------------------------------------

T is all permutations sorted (e.g.) [[4,3,2,1] ... [1,2,3,4]]
X is initially the first permutation (e.g.) [4,3,2,1]

Create Q table and R/S probability tables

while at-least-one-fails and iteration < max_iter

    while iteration < max_iter:

        iteration++
        
        for each list in X:
            Algorithm 2
            
    at-least-one-fails = false

    for each list in X:

        execute the policy and see if sorts correctly
        
        if fails to sort:

            at-least-one-fails = true
            break
    
    if at-least-one-fails = false:

        for each list in T:

            execute the policy and see if sorts correctly

            if fails to sort:

                at-least-one-fails = true
                add list to X
                break

if iteration > max_iter:
    indicate failed to converge

--------------------------------------------------------------------------------
Algorithm 2
--------------------------------------------------------------------------------

L is a training list
iteration = 0
set up environment based on L

while last_action != Terminate and iteration < max_iter:

    if last_action = NOOP or highest Q value for any action negative or not greedy
        choose random action
    else:
        choose action greedy
    
    execute action

    update R/S tables
    update Q table
